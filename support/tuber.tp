#!/usr/bin/env perl
# vim: sts=3 ts=3 sw=3 et ai :

########################################################################
# __SECTION__
#
# Preamble
#
########################################################################
use strict;
use warnings;
my $VERSION = '0.0.1';
RUSE('Data::Tubes',         qw< pipeline summon >);
RUSE('Log::Log4perl::Tiny', qw< :easy LOGLEVEL :no_extra_logdie_message >);
RUSE('Template::Perlish',   qw< render >);
RUSE('Try::Tiny',           qw< try catch finally >);
sub try (&;@); sub catch (&;@); sub finally (&;@);

########################################################################
# __SECTION__
#
# Command Line Handling
#
########################################################################
my %config = get_options(
   ['loglevel|log=s', default => 'INFO'], # leave it or remove it

   # start putting your options here
   'foo|f=s',
   ['bar|b=s', default  => 'default value for bar'],
   ['baz|B=i', required => 1],
);

# Remove following line if you remove 'loglevel' in options above
LOGLEVEL($config{loglevel});

########################################################################
# __SECTION__
#
# Business Logic
#
########################################################################

# this is just an example to get you started, works with an input file
# like this:
#
#    Flavio,44,salad
#    FooBar,23,kiwi

my $template = <<'END_OF_TEMPLATE';
[[%%]% name %] is [[%%]% age %] and likes [[%%]% food %].
-----------------------------------------------------------
END_OF_TEMPLATE

pipeline(
   'Source::iterate_files',

   # Choose a reader
   #
   'Reader::by_line',
   #
   #'Reader::by_paragraph',
   #
   #['Reader::by_separator', separator => "\n---\n"],

   # Choose a parser
   #
   #['Parser::hashy',
   #   chunks_separator    => ';',
   #   key_value_separator => ':',
   #   default_key         => 'name'],
   #
   ['Parser::by_format', format => 'name,age,food'],
   #
   #['Parser::by_regex',
   #   regex => qr{(?mxs:\A(?<name>.*?),(?<age>\d+),(^<food>.*))}],

   # There's little choiche for a renderer initially...
   ['Renderer::with_template_perlish', template => $template],

   # Choose a writer
   ['Writer::to_files', filename => \*STDOUT],
   #
   #['Writer::to_files',
   #    filename  => '[% name %]-output-%02d.txt',
   #    header    => "-- here comes the data:\n",
   #    interlude => "-- end of record, start of next record --\n",
   #    footer    => "-- end of data\n",
   #    binmode   => ':encoding(UTF-8)',
   #    policy    => {records_threshold => 100}],
   #
   #['Writer::dispatch_to_files',
   #    filename_factory => sub {...},
   #    filename_template => '[% name %]-{{ key }}-output-%02d.txt',
   #    tp_opts  => {start => '{{', stop => '}}'},

   {tap => 'sink'},
)->([@ARGV]);


########################################################################
# __SECTION__
#
# Embedded Modules
#
# You should not need to fiddle any more with code beyond this point.
# Be sure to get your POD right though!
#
########################################################################

# Ancillary scaffolding here
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;

sub get_options {
   my %config;
   my @options = qw< usage! help! man! version! >;
   my (%fallback_for, @required);
   for my $option (@_) {
      if (ref $option) {
         my ($spec, %opts) = @$option;
         push @options, $spec;

         my ($name) = split /\|/, $spec, 2;
         if (exists $opts{default}) {
            $config{$name} = $opts{default};
         }
         if (exists $opts{fallback}) {
            $fallback_for{$name} = $opts{fallback};
         }
         if (exists $opts{required}) {
            push @required, $name;
         }
      } ## end if (ref $option)
      else {
         push @options, $option;
      }
   } ## end for my $option (@_)

   GetOptions(\%config, @options)
     or pod2usage(-verbose => 99, -sections => 'USAGE');
   pod2usage(message => "$0 $VERSION", -verbose => 99,
      -sections => ' ') if $config{version};
   pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
   pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
     if $config{help};
   pod2usage(-verbose => 2) if $config{man};

   while (my ($key, $value) = each %fallback_for) {
      next if exists $config{$key};
      $config{$key} = $value;
   }

   my @missing = grep { ! exists $config{$_} } @required;
   pod2usage(message => "missing options @missing",
      -verbose => 99, -sections => 'USAGE')
     if @missing;

   return %config if wantarray();
   return \%config;
} ## end sub get_options

sub RUSE {
   my $module = shift;
   (my $packfile = $module . '.pm') =~ s{::}{/}gmxs;
   require $packfile;
   $module->import(@_);
   return $module;
} ## end sub RUSE

[% modules_bundle %]

__END__

########################################################################
# __SECTION__
#
# POD 
#
########################################################################

=pod

=encoding utf8

=head1 NAME

[% name %] - [% abstract %]

=head1 USAGE

   [% name %] [--usage] [--help] [--man] [--version]

   [% name %]

=head1 EXAMPLES

   shell$ [% name %]

=for author, to fill in
    Put a few examples of how to use your program


=head1 DESCRIPTION

=for author, to fill in
    Put a thorough description of your program


=head1 OPTIONS

=for author, to fill in
    Description of all command-line options

=over

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item --man

print out the full documentation for the script.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=back

=head1 DIAGNOSTICS

=for author, to fill in
    List and describe all warnings/error messages

=over

=item C<< Error message here, perhaps with %s placeholders >>

[Error description...]

=item C<< Another error message here >>

[Error description...]

[You get the idea...]

=back


=head1 CONFIGURATION AND ENVIRONMENT

=for author, to fill in
    Explain any configuration that can be used by the program, via some
    file or via environment variables.

[% name %] requires no configuration files or environment variables.


=head1 BUGS AND LIMITATIONS

=for author, to fill in
    List any known bugs and limitations of your program

No bugs have been reported.


=head1 AUTHOR

[% author %] <[% email %]>


=head1 LICENCE AND COPYRIGHT

Copyright (c) [% year %], [% author %] <[% email %]>

=for author, to fill in
   Put your licensing terms here, leaving the terms for the embedded
   modules. If you're fine with the Artistic License 2.0, you can find
   them in the two paragraphs below, delete them if you want to use
   something different.

This program is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

This program embeds all modules from distribution Data::Tubes, that is
Copyright (C) 2016 by Flavio Poletti and licensed under the Artistic
License 2.0. See L<https://metacpan.org/pod/Data::Tubes> for further
details.

This program embeds Log::Log4perl::Tiny, that is Copyright (C) 2010-2016
by Flavio Poletti and licensed under the Artistic License 2.0. See
L<https://metacpan.org/pod/Log::Log4perl::Tiny> for further details.

This program embeds Template::Perlish, that is Copyright (C) 2008-2016
by Flavio Poletti and licensed under the Artistic License 2.0. See
L<https://metacpan.org/pod/Template::Perlish> for further details.

This program embeds Try::Tiny, that is Copyright (c) 2009 by יובל קוג'מן
(Yuval Kogman) and licensed under The MIT (X11) License. See
L<https://metacpan.org/pod/Try::Tiny> for further details.

=cut
