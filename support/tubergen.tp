#!/usr/bin/env perl
# vim: sts=3 ts=3 sw=3 et ai :

use strict;
use warnings;
use 5.010;
my $VERSION = "{{[ version ]}}";
RUSE('Log::Log4perl::Tiny', qw< :easy LOGLEVEL >);
RUSE('Data::Tubes',         qw< pipeline >);

########################################################################
#
# Input options and logger initialization
#
########################################################################
my %config = get_options(
   ['loglevel|log=s', default => 'INFO'],

   # start putting your options here
   ['abstract|A=s', required => 1],
   ['author|a=s',   required => 1],
   ['email|e=s',    required => 1],
   ['name|n=s',     required => 1],
   ['output|o=s'],
   ['year|y=s', default => 1900 + (localtime)[5]],
);

########################################################################
#
# Business Logic
#
########################################################################
$config{output} //= $config{name};
$config{modules_bundle} = modules_bundle($config{module});
pipeline(
   ['Renderer::with_template_perlish', template => template()],
   ['Writer::to_files', filename => $config{output}],
   {tap => 'sink'},
)->({structured => \%config});

my $mode = ((stat $config{output})[2] | 0111) & (~umask());
chmod $mode, $config{output};

sub modules_bundle {
   open my $fh, '<', __FILE__ or die "open(): $!";
   local $/;
   my $ME = <$fh>;
   my ($text) = $ME =~ m{
      (
         ^\#\ __MOBUNDLE_INCLUSION__\s*
         .*
         ^\#\ __MOBUNDLE_INCLUSION__
      )
   }mxs;
   return $text;
}


########################################################################
#
# You should not need to fiddle any more beyond this point
#
########################################################################

# Ancillary scaffolding here
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;

sub get_options {
   my %config;
   my @options = qw< usage! help! man! version! >;
   my (%fallback_for, @required);
   for my $option (@_) {
      if (ref $option) {
         my ($spec, %opts) = @$option;
         push @options, $spec;

         my ($name) = split /\|/, $spec, 2;
         if (exists $opts{default}) {
            $config{$name} = $opts{default};
         }
         if (exists $opts{fallback}) {
            $fallback_for{$name} = $opts{fallback};
         }
         if (exists $opts{required}) {
            push @required, $name;
         }
      } ## end if (ref $option)
      else {
         push @options, $option;
      }
   } ## end for my $option (@_)

   GetOptions(\%config, @options)
     or pod2usage(-verbose => 99, -sections => 'USAGE');
   pod2usage(message => "$0 $VERSION", -verbose => 99,
      -sections => ' ') if $config{version};
   pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
   pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
     if $config{help};
   pod2usage(-verbose => 2) if $config{man};

   while (my ($key, $value) = each %fallback_for) {
      next if exists $config{$key};
      $config{$key} = $value;
   }

   my @missing = grep { ! exists $config{$_} } @required;
   pod2usage(message => "missing options @missing",
      -verbose => 99, -sections => 'USAGE')
     if @missing;

   return %config if wantarray();
   return \%config;
} ## end sub get_options

sub RUSE {
   my $module = shift;
   (my $packfile = $module . '.pm') =~ s{::}{/}gmxs;
   require $packfile;
   $module->import(@_);
   return $module;
} ## end sub RUSE

# Embedded stuff here

# __MOBUNDLE_INCLUSION__
BEGIN {
   my %file_for = (

# __MOBUNDLE_FILES__

{{[
   for my $module (A('modules')) {
      my ($name, $contents) = @$module;
      $contents =~ s{^}{ }gmxs;
]}}

# __MOBUNDLE_FILE__

      '{{[= $name ]}}' => <<'END_OF_FILE',
{{[= $contents ]}}
END_OF_FILE
{{[
   }
]}}


# __MOBUNDLE_FILE__
   );

   unshift @INC, sub {
      my ($me, $packfile) = @_;
      return unless exists $file_for{$packfile};
      (my $text = $file_for{$packfile}) =~ s/^\ //gmxs;
      chop($text); # added \n at the end
      open my $fh, '<', \$text or die "open(): $!\n";
      return $fh;
   };
} ## end BEGIN
# __MOBUNDLE_INCLUSION__


sub template {
   my $template = <<'END_OF_TEMPLATE';
{{[=
   my $text = V('tuber');
   $text =~ s/^/ /gmxs;
   $text;
]}}
END_OF_TEMPLATE
   $template =~ s{^\ }{}gmxs;
   $template =~ s{\n\z}{}mxs;
   return $template;
}

__END__

=pod

=encoding utf8

=head1 NAME

tubergen - generate Data::Tubes programs

=head1 USAGE

   tubergen [--usage] [--help] [--man] [--version]

   tubergen --abstract|-A text
              --author|-a name
               --email|-e email-address
                --name|-n program-name
              --output|-o filename
               [--year|-y year]

=head1 EXAMPLES

   # generate file my-script in current directory
   shell$ tubergen -n my-script -A 'this script does that' \
      -a 'A. U. Thor' -e 'a.u.thor@example.com'

   # override output filename, e.g. to put in different directory
   shell$ tubergen -n my-script -A 'this script does that' \
      -a 'A. U. Thor' -e 'a.u.thor@example.com' \
      -o /path/to/my-script

   # you can optionally force setting a different year for copyright
   shell$ tubergen -n my-script -A 'this script does that' \
      -a 'A. U. Thor' -e 'a.u.thor@example.com' -y 2020


=head1 DESCRIPTION

This program helps you getting started with L<Data::Tubes> quickly. It's
a minting program that generates a new script with all batteries
included:

=over

=item *

L<Data::Tubes> different modules and plugins, of course

=item *

L<Log::Log4perl::Tiny>

=item *

L<Template::Perlish>

=item *

L<Try::Tiny>

=back

The last one is optional in L<Data::Tubes>, but it is extremely handy
and allows you using all plugins to their full potential, so why not?

Generating a new program requires you to provide four options:

=over

=item *

a L<name|/"--name program-name"> for your program;

=item *

an L<abstract|/"--abstract text"> to (briefly) describe what your program does;

=item *

the L<author|/"--author name"> name;

=item *

the L<email|/"--email email-address"> of the author.

=back

This allows kickstarting the POD section of your new program. You can
also optionally pass argument L<output|/"--output filename">, to set the output filename
(which is equal to L</name> by default>) and a L<year|/"--year year"> for the
copyright notice (the current year is used by default).

After you generate the minted program, you end up with a Perl source
file containing the following sections:

=over

=item *

a L</Preamble> with housekeeping that will help get the new program
started with using the included batteries;

=item *

a L</"Command Line Handling"> section for defining how your program
accepts its inputs;

=item *

a L</"Business Logic"> section for putting your code;

=item *

an L</"Embedded Modules"> section with the I<batteries>;

=item *

a L</"POD"> section where you can write the documentation for your new
program.

=back

Each of the above parts is explained in the sub-sections below.

=head2 Preamble



=head2 Command Line Handling

=head2 Business Logic

=head2 Embedded Modules

=head2 POD



=head1 OPTIONS

=over

=item --abstract text

=item -A text

a (brief) text describing what your program does. This parameter that is
used to initialize the POD section of the newly minted program. This
option is required.

=item --author name

=item -a name

the name of the author of the program, used to initialize the POD
section of the newly minted program. This option is required.

=item --email email-address

=item -e email-address

the email address of the author of the program, used to initialize the
POD section of the newly minted program. This option is required.

=item --help

print a somewhat more verbose help, showing usage, this description of
the options and some examples from the synopsis.

=item --man

print out the full documentation for the script.

=item --name program-name

=item -n program-name

the name assigned to the program. This is used to both initialize the
POD section of the newly minted program, and as the file name where it
is saved to. You can override the filename with option
L<output|/"--output filename">. This option is required.

=item --output filename

=item -o filename

the filename where the program should be saved. Defaults to the value
assigned to L<name|/"--name program-name">.

=item --usage

print a concise usage line and exit.

=item --version

print the version of the script.

=item --year year

=item -y year

X<year>

The year to set for starting the copyright of the newly minted program
in the relevant POD section. Defaults to the current year.

=back

=head1 DIAGNOSTICS

tubergen will complain if any of the required option is missing. It will
also complain if you try to define unknown options.

=head1 CONFIGURATION AND ENVIRONMENT

tubergen requires no configuration files or environment variables.


=head1 BUGS AND LIMITATIONS

No bugs have been reported, but you can do this through Issues at
L<https://github.com/polettix/Data-Tubes/issues>.


=head1 AUTHOR

Flavio Poletti polettix@cpan.org


=head1 LICENCE AND COPYRIGHT

Copyright (c) 2016, Flavio Poletti polettix@cpan.org

This program is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

This program embeds all modules from distribution Data::Tubes, that is
Copyright (C) 2016 by Flavio Poletti and licensed under the Artistic
License 2.0. See L<https://metacpan.org/pod/Data::Tubes> for further
details.

This program embeds Log::Log4perl::Tiny, that is Copyright (C) 2010-2016
by Flavio Poletti and licensed under the Artistic License 2.0. See
L<https://metacpan.org/pod/Log::Log4perl::Tiny> for further details.

This program embeds Template::Perlish, that is Copyright (C) 2008-2016
by Flavio Poletti and licensed under the Artistic License 2.0. See
L<https://metacpan.org/pod/Template::Perlish> for further details.

This program embeds Try::Tiny, that is Copyright (c) 2009 by יובל קוג'מן
(Yuval Kogman) and licensed under The MIT (X11) License. See
L<https://metacpan.org/pod/Try::Tiny> for further details.

=cut
