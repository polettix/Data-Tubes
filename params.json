{
  "name": "Data::Tubes",
  "tagline": "Text and data canalising",
  "body": "This module allows you to define _Tubes_, which are little more than transformation subroutines over records.\r\n\r\nOne example, fast!\r\n\r\n```perl\r\nuse Data::Tubes qw< drain summon >;\r\n# Load components from relevant plugins\r\nsummon(\r\n   qw<\r\n     +Plumbing::sequence\r\n     +Source::iterate_files\r\n     +Reader::read_by_line\r\n     +Parser::parse_hashy\r\n     +Renderer::render_with_template_perlish\r\n     +Writer::write_to_files\r\n     >\r\n);\r\n\r\n# define a tube made of a sequence of tubes, each of the relevant\r\n# type and doing its specific job.\r\nmy $sequence = sequence(\r\n   tubes => [\r\n      iterate_files(files => [\\\"n=Flavio|q=how are you\\nn=X|q=Y\"]),\r\n      read_by_line(),\r\n      parse_hashy(chunks_separator => '|'),\r\n      render_with_template_perlish(template => \"Hi [% n %], [% q %]?\\n\"),\r\n      write_to_files(filename => \\*STDOUT),\r\n   ],\r\n);\r\n\r\n# just \"drain\" whatever comes out of the tube, we're not really\r\n# interesting in collecting output records as they are already\r\n# written by write_to_file. This is necessary so that the actions are\r\n# actually \"run\", as of now $sequence is only a promise to do some\r\n# work.\r\ndrain($sequence);\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}